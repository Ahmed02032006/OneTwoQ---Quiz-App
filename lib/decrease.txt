Column(
                                  children: [
                                    const SizedBox(
                                      height: 10,
                                    ),
                                    CustomLoadingBar(
                                      progress: m2Progress,
                                      delay: const Duration(milliseconds: 2500),
                                    ),
                                    const SizedBox(
                                      height: 10,
                                    ),
                                    LayoutBuilder(
                                      builder: (context, constraints) {
                                        return Row(
                                          crossAxisAlignment:
                                              CrossAxisAlignment.start,
                                          mainAxisAlignment:
                                              MainAxisAlignment.center,
                                          children: [
                                            Column(
                                              children: [
                                                Row(
                                                  children: [
                                                    MiniLoadingBar(
                                                      progress: mProgress,
                                                      delay: 4000,
                                                    ),
                                                    const SizedBox(width: 10),
                                                    const Text(
                                                      "M",
                                                      style: TextStyle(
                                                        fontSize: 15,
                                                        fontWeight:
                                                            FontWeight.bold,
                                                      ),
                                                    ),
                                                  ],
                                                ),
                                                const SizedBox(height: 3),
                                                Row(
                                                  children: [
                                                    MiniLoadingBar(
                                                      progress: fProgress,
                                                      delay: 5000,
                                                    ),
                                                    const SizedBox(width: 10),
                                                    const Text(
                                                      "F ",
                                                      style: TextStyle(
                                                        fontSize: 15,
                                                        fontWeight:
                                                            FontWeight.bold,
                                                      ),
                                                    ),
                                                  ],
                                                ),
                                                const SizedBox(height: 3),
                                                Row(
                                                  children: [
                                                    MiniLoadingBar(
                                                      progress: nProgress,
                                                      delay: 6000,
                                                    ),
                                                    const SizedBox(width: 10),
                                                    const Text(
                                                      "N",
                                                      style: TextStyle(
                                                        fontSize: 15,
                                                        fontWeight:
                                                            FontWeight.bold,
                                                      ),
                                                    ),
                                                  ],
                                                ),
                                                const SizedBox(height: 15),
                                              ],
                                            ),
                                            const SizedBox(
                                              width: 15,
                                            ),
                                            Column(
                                              children: [
                                                Row(
                                                  children: [
                                                    MiniLoadingBar(
                                                      progress: a1Progress,
                                                      delay: 7000,
                                                    ),
                                                    const SizedBox(width: 10),
                                                    const Text(
                                                      "0 - 14   ",
                                                      style: TextStyle(
                                                        fontSize: 15,
                                                        fontWeight:
                                                            FontWeight.bold,
                                                      ),
                                                    ),
                                                  ],
                                                ),
                                                const SizedBox(height: 3),
                                                Row(
                                                  children: [
                                                    MiniLoadingBar(
                                                      progress: a2Progress,
                                                      delay: 8000,
                                                    ),
                                                    const SizedBox(width: 10),
                                                    const Text(
                                                      "15 - 24 ",
                                                      style: TextStyle(
                                                        fontSize: 15,
                                                        fontWeight:
                                                            FontWeight.bold,
                                                      ),
                                                    ),
                                                  ],
                                                ),
                                                const SizedBox(height: 3),
                                                Row(
                                                  children: [
                                                    MiniLoadingBar(
                                                      progress: a3Progress,
                                                      delay: 9000,
                                                    ),
                                                    const SizedBox(width: 10),
                                                    const Text(
                                                      "25 - 34",
                                                      style: TextStyle(
                                                        fontSize: 15,
                                                        fontWeight:
                                                            FontWeight.bold,
                                                      ),
                                                    ),
                                                  ],
                                                ),
                                                const SizedBox(height: 3),
                                                Row(
                                                  children: [
                                                    MiniLoadingBar(
                                                      progress: a4Progress,
                                                      delay: 10000,
                                                    ),
                                                    const SizedBox(width: 10),
                                                    const Text(
                                                      "35 - 44",
                                                      style: TextStyle(
                                                        fontSize: 15,
                                                        fontWeight:
                                                            FontWeight.bold,
                                                      ),
                                                    ),
                                                  ],
                                                ),
                                                const SizedBox(height: 3),
                                                Row(
                                                  children: [
                                                    MiniLoadingBar(
                                                      progress: a5Progress,
                                                      delay: 11000,
                                                    ),
                                                    const SizedBox(width: 10),
                                                    const Text(
                                                      "45 - 64",
                                                      style: TextStyle(
                                                        fontSize: 15,
                                                        fontWeight:
                                                            FontWeight.bold,
                                                      ),
                                                    ),
                                                  ],
                                                ),
                                                const SizedBox(height: 3),
                                                Row(
                                                  children: [
                                                    MiniLoadingBar(
                                                      progress: a6Progress,
                                                      delay: 12000,
                                                    ),
                                                    const SizedBox(width: 10),
                                                    const Text(
                                                      "65 +     ",
                                                      style: TextStyle(
                                                        fontSize: 15,
                                                        fontWeight:
                                                            FontWeight.bold,
                                                      ),
                                                    ),
                                                  ],
                                                ),
                                                const SizedBox(height: 15),
                                              ],
                                            ),
                                          ],
                                        );
                                      },
                                    ),
                                    // ====================================================================== Country
                                    // ======================================================================
                                    ByDefaultCountries(
                                      cp1: c1Progress,
                                      cp2: c2Progress,
                                      cp3: c3Progress,
                                      cp4: c4Progress,
                                      cp5: c5Progress,
                                      cp6: c6Progress,
                                    ),
                                    const CountryDropdown(),
                                    const SizedBox(height: 5),
                                  ],
                                ),




























                                class CustomLoadingBar extends StatefulWidget {
  final double progress;
  final Duration delay;

  const CustomLoadingBar({
    super.key,
    required this.progress,
    this.delay = const Duration(milliseconds: 1500), // Slower start delay
  });

  @override
  State<CustomLoadingBar> createState() => _CustomLoadingBarState();
}

class _CustomLoadingBarState extends State<CustomLoadingBar>
    with TickerProviderStateMixin {
  late AnimationController _fadeController;
  late Animation<double> _fadeAnimation;
  late AnimationController _numberFadeController;
  late Animation<double> _numberFadeAnimation;

  double animatedProgress = 0.0;
  bool showNumbers = false;

  @override
  void initState() {
    super.initState();

    // Slower fade-in animation for the progress bar
    _fadeController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 2500),
    );
    _fadeAnimation =
        CurvedAnimation(parent: _fadeController, curve: Curves.easeInOut);

    // Slower fade-in animation for the number
    _numberFadeController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 1500),
    );
    _numberFadeAnimation =
        CurvedAnimation(parent: _numberFadeController, curve: Curves.easeInOut);

    // Start the progress bar fade-in after the delay
    Future.delayed(widget.delay, () {
      if (mounted) {
        setState(() {
          animatedProgress = widget.progress;
        });
        _fadeController.forward().then((_) {
          // Start number fade-in after progress animation
          setState(() {
            showNumbers = true;
          });
          _numberFadeController.forward();
        });
      }
    });
  }

  @override
  void didUpdateWidget(covariant CustomLoadingBar oldWidget) {
    super.didUpdateWidget(oldWidget);
    if (widget.progress != oldWidget.progress) {
      setState(() {
        animatedProgress = widget.progress;
      });
    }
  }

  @override
  void dispose() {
    _fadeController.dispose();
    _numberFadeController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    int progressPercentage = (animatedProgress * 100).toInt();
    int remainingPercentage = 100 - progressPercentage;

    return FadeTransition(
      opacity: _fadeAnimation,
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Stack(
            children: [
              // Background bar
              Container(
                width: 350,
                height: 17,
                decoration: BoxDecoration(
                  color: Colors.grey.shade300,
                ),
              ),
              // Slower progress bar animation
              AnimatedContainer(
                duration: const Duration(milliseconds: 2500),
                curve: Curves.easeInOut,
                width: 350 * animatedProgress,
                height: 17,
                decoration: const BoxDecoration(
                  color: Color.fromARGB(255, 13, 211, 19),
                ),
                child: Center(
                  child: FadeTransition(
                    opacity: _numberFadeAnimation,
                    child: Text(
                      '$progressPercentage%',
                      style: const TextStyle(
                        color: Colors.black,
                        fontWeight: FontWeight.bold,
                        fontSize: 12,
                      ),
                    ),
                  ),
                ),
              ),
              // Remaining percentage
              Positioned(
                left: 350 * animatedProgress,
                top: 0,
                child: Container(
                  width: 350 * (1 - animatedProgress),
                  height: 17,
                  alignment: Alignment.center,
                  child: FadeTransition(
                    opacity: _numberFadeAnimation,
                    child: Text(
                      '$remainingPercentage%',
                      style: const TextStyle(
                        color: Colors.black,
                        fontWeight: FontWeight.bold,
                        fontSize: 12,
                      ),
                    ),
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }
}

class MiniLoadingBar extends StatefulWidget {
  final double progress; // Progress value between 0 and 1
  final int delay;
  final int myWidth;

  const MiniLoadingBar({
    super.key,
    required this.progress,
    required this.delay,
    this.myWidth = 125,
  });

  @override
  State<MiniLoadingBar> createState() => _MiniLoadingBarState();
}

class _MiniLoadingBarState extends State<MiniLoadingBar>
    with TickerProviderStateMixin {
  late AnimationController _progressController;
  late Animation<double> _progressAnimation;
  late AnimationController _fadeController;
  late Animation<double> _fadeAnimation;

  bool isVisible = false;
  bool showText = false;

  @override
  void initState() {
    super.initState();

    _progressController = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 2),
    );

    _progressAnimation =
        Tween<double>(begin: 0.0, end: widget.progress).animate(CurvedAnimation(
      parent: _progressController,
      curve: Curves.easeInOut,
    ));

    _fadeController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 500),
    );

    _fadeAnimation =
        Tween<double>(begin: 0.0, end: 1.0).animate(CurvedAnimation(
      parent: _fadeController,
      curve: Curves.easeInOut,
    ));

    Future.delayed(Duration(milliseconds: widget.delay), () {
      if (mounted) {
        setState(() {
          isVisible = true;
        });
        _progressController.forward().then((_) {
          if (mounted) {
            setState(() {
              showText = true;
            });
            _fadeController.forward();
          }
        });
      }
    });
  }

  @override
  void dispose() {
    _progressController.dispose();
    _fadeController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedSwitcher(
      duration: const Duration(milliseconds: 300),
      child: isVisible
          ? AnimatedBuilder(
              animation: _progressAnimation,
              builder: (context, child) {
                double animatedProgress = _progressAnimation.value;
                int filledPercentage = (widget.progress * 100).toInt();
                int remainingPercentage = 100 - filledPercentage;

                return Stack(
                  children: [
                    // Background bar (inactive portion)
                    Container(
                      width: widget.myWidth.toDouble(),
                      height: 17,
                      decoration: BoxDecoration(
                        color: Colors.grey.shade300,
                      ),
                    ),
                    // Progress bar (active portion)
                    Container(
                      width: widget.myWidth.toDouble() * animatedProgress,
                      height: 17,
                      decoration: const BoxDecoration(
                        color: Color.fromARGB(255, 13, 211, 19),
                      ),
                    ),
                    // Text inside progress bar (filled)
                    Positioned(
                      left: 10,
                      top: 0,
                      bottom: 0,
                      child: showText
                          ? FadeTransition(
                              opacity: _fadeAnimation,
                              child: Text(
                                '$filledPercentage%',
                                style: const TextStyle(
                                  color: Colors.black,
                                  fontWeight: FontWeight.bold,
                                  fontSize: 12,
                                ),
                              ),
                            )
                          : const SizedBox(),
                    ),
                    // Text inside remaining bar (unfilled)
                    Positioned(
                      right: 10,
                      top: 0,
                      bottom: 0,
                      child: showText
                          ? FadeTransition(
                              opacity: _fadeAnimation,
                              child: Text(
                                '$remainingPercentage%',
                                style: const TextStyle(
                                  color: Colors.black,
                                  fontWeight: FontWeight.bold,
                                  fontSize: 12,
                                ),
                              ),
                            )
                          : const SizedBox(),
                    ),
                  ],
                );
              },
            )
          : SizedBox(
              width: widget.myWidth.toDouble(),
              height: 17,
              child: Container(
                color: Colors.transparent,
              ),
            ),
    );
  }
}

