import 'package:flutter/material.dart';
import 'package:quiz_app/admin/dashboard.dart';
import 'package:quiz_app/pages/categories.dart';
import 'package:quiz_app/pages/home.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:quiz_app/firebase_options.dart';
import 'package:quiz_app/pages/options.dart';
import 'package:quiz_app/pages/questions.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  try {
    await Firebase.initializeApp(
      options: DefaultFirebaseOptions.currentPlatform,
    );
    debugPrint(' initializing Firebase');
 
    runApp(const MyApp());
  } catch (e) {
    debugPrint('Error initializing Firebase: $e');
  }
}
// void main() async {
//   WidgetsFlutterBinding.ensureInitialized();
//   runApp(const MyApp());
// }

class MyApp extends StatelessWidget {
  const MyApp({super.key});
  
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      // debugShowCheckedModeBanner: true,
      title: 'Quiz App',
      theme: ThemeData(
        fontFamily: "Urbanist",
      ),
      home: const Preloader(), // Set the preloader as the home page
    );
  }
}

class Preloader extends StatefulWidget {
  const Preloader({super.key});

  @override
  // ignore: library_private_types_in_public_api
  _PreloaderState createState() => _PreloaderState();
}

class _PreloaderState extends State<Preloader>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 2), // Adjust the duration as needed
    );

    // Start animation and navigate to Home() after animation completion
    _controller.forward().then((_) {
      Navigator.of(context).pushReplacement(
        MaterialPageRoute(
          // builder: (context) => const Home(),
          builder: (context) => const Dashboard(),
          // builder: (context) => const Categories(),
          // builder: (context) => const Options(),
          // builder: (context) => const Forwarding(),
          // builder: (context) => const Questions(),
        ),
      );
    });
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white, // Set background color as needed
      body: Center(
        child: AnimatedBuilder(
          animation: _controller,
          builder: (context, child) {
            return Transform.translate(
              offset: Offset(0.0,
                  -50 * (1 - _controller.value)), // Adjust offset as needed
              child: child,
            );
          },
          child: Image.asset(
            'assets/images/preloader.png', // Replace 'preloader_image.png' with your image asset
            width: 150, // Adjust width as needed
            height: 150, // Adjust height as needed
          ),
        ),
      ),
    );
  }
}
